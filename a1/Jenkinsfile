pipeline {
    agent { label 'jenkins-agent' }

    environment {
        // Define the image name (must include Docker Hub username for push)
        APP_IMAGE_NAME = 'ravinderjit/assignment1'
        APP_CONTAINER_NAME = 'project_a1'
        APP_PORT = '8080'        
        DOCKER_BIN = '/usr/bin/docker'
        
        // Docker Hub credentials ID in Jenkins
        DOCKER_CREDS_ID = 'dockerhub-creds'
    }

    stages {
        stage('Clone Source Code') {
            steps {
                checkout scm
            }
        }

        stage('Build Image') {
            steps {
                // Stop and remove container (if it exists)
                sh "${DOCKER_BIN} stop ${APP_CONTAINER_NAME} || true"
                sh "${DOCKER_BIN} rm ${APP_CONTAINER_NAME} || true"
                
                dir('a1') {
                    // Tag the image with the unique Jenkins BUILD_NUMBER for versioning
                    // sh "${DOCKER_BIN} build -t ${APP_IMAGE_NAME}:${env.BUILD_NUMBER} ."

                    // Or, simply tag as 'latest'
                    sh "${DOCKER_BIN} build -t ${APP_IMAGE_NAME}:latest ."
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                 usernameVariable: 'DOCKER_USER_VAR',
                                                 passwordVariable: 'DOCKER_PASS_VAR')]) {
                    sh """
                        echo 'Logging into Docker Hub ...'                        
                        echo "$DOCKER_PASS_VAR" | ${DOCKER_BIN} login -u $DOCKER_USER_VAR --password-stdin
                        
                        echo 'Pushing image to Docker Hub ...'
                        ${DOCKER_BIN} push ${APP_IMAGE_NAME}:latest
                        
                        ${DOCKER_BIN} logout
                    """
                }
            }
        }

        stage('Run Container Locally') {
            steps {
                // Run the container locally using the newly built image
                // sh "${DOCKER_BIN} run -d -p ${APP_PORT}:${APP_PORT} --name ${APP_CONTAINER_NAME} ${APP_IMAGE_NAME}:${env.BUILD_NUMBER}"
                sh "${DOCKER_BIN} run -d -p ${APP_PORT}:${APP_PORT} --name ${APP_CONTAINER_NAME} ${APP_IMAGE_NAME}:latest
            }
        }
    }

    post {
        failure {
            sh "echo 'Pipeline failed. Check build logs for errors.'"
        }
        success {
            sh "echo 'Container is running. Access application at: http://localhost:${APP_PORT}'"
            // sh "echo 'Image pushed to Docker Hub with tag: ${env.BUILD_NUMBER}'"
            sh "echo 'Image pushed to Docker Hub'"
        }
    }
}