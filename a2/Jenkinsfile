pipeline {
    agent { label 'jenkins-agent' }

    environment {
        APP_IMAGE_NAME = 'ravinderjit/assignment2'

        DOCKER_CREDS_ID = 'dockerhub-creds'
        DOCKER_BIN = '/usr/bin/docker'

        KUBECTL_BIN = '/usr/local/bin/kubectl'
            
        K8S_MANIFEST_FILE = 'k8s-manifest.yaml'
        K8S_NAMESPACE = 'rgill201' // Namespace in k8s-manifest.yaml
        K8S_RBAC_FILE = 'rbac-fix.yaml' // RBAC
        K8S_DEPLOYMENT_NAME = 'a2-deployment' // Deployment resource to check rollout status
    }

    stages {
        stage('Clone Source Code') {
            steps {
                // Clones the repo containing the Jenkinsfile and the application source code/manifests
                checkout scm
            }
        }

        stage('Build Image') {
            steps {
                // Use the unique BUILD_NUMBER for versioning in Docker Hub and Kubernetes
                dir('a2') {
                    sh "${DOCKER_BIN} build -t ${APP_IMAGE_NAME}:latest ."
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDS_ID,
                                                 usernameVariable: 'DOCKER_USER_VAR',
                                                 passwordVariable: 'DOCKER_PASS_VAR')]) {
                    sh """
                        echo 'Logging into Docker Hub...'                        
                        echo "$DOCKER_PASS_VAR" | ${DOCKER_BIN} login -u $DOCKER_USER_VAR --password-stdin
                        
                        echo 'Pushing image to Docker Hub...'
                        ${DOCKER_BIN} push ${APP_IMAGE_NAME}:latest
                        
                        ${DOCKER_BIN} logout
                    """
                }
            }
        }

        stage('Set up Namespace & RBAC') {
            steps {
                dir('a2') {
                    sh "echo 'Creating/Ensuring Namespace and RBAC Permissions...'"
                    
                    // 1. ENSURE NAMESPACE EXISTS (Idempotent creation)
                    sh "${KUBECTL_BIN} create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | ${KUBECTL_BIN} apply -f -"
                    
                    // 2. ENSURE RBAC BINDING EXISTS (Idempotent creation)
                    // The 'apply' command is idempotent and safer than 'create' here
                    sh "${KUBECTL_BIN} apply -f ${K8S_RBAC_FILE} -n ${K8S_NAMESPACE}"
                }
            }
        } 

        stage('Deploy to K8s') {
            steps {
                dir('a2') {
                    // 1. APPLY APPLICATION MANIFESTS (Initial CM/Secret/Service/Deployment)
                    // The apply command is now safe because the Namespace and RoleBinding already exist.
                    sh "echo 'Applying K8s application manifests...'"
                    sh "${KUBECTL_BIN} apply -f ${K8S_MANIFEST_FILE} -n ${K8S_NAMESPACE}"
                    
                    // 2. Wait for the rolling update to complete
                    sh "${KUBECTL_BIN} rollout status deployment/${K8S_DEPLOYMENT_NAME} -n ${K8S_NAMESPACE}"
                }
            }
        }
    }

    post {
        failure {
            sh "echo 'Pipeline failed. Check build logs for errors.'"
        }
        success {
            sh "echo 'Application deployed to K8s. Access via http://localhost:30000'"
        }
    }
}